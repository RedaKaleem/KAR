import speech_recognition as sr
import datetime
import pyttsx3
import webbrowser
import spotipy
from spotipy.oauth2 import SpotifyOAuth
import time
import pytesseract
from gtts import gTTS
import os
import subprocess
import platform
import pywhatkit as kit

engine = pyttsx3.init()
engine.setProperty('rate', 195)
engine.setProperty('volume', 1.0)
voices = engine.getProperty('voices')
for voice in voices:
        if "UK" in voice.name or "British" in voice.name or "en-gb" in voice.id:
            engine.setProperty('voice', voice.id)
            break
SPOTIPY_CLIENT_ID = "5aacd5d171ff4e95b1615ac82436a7a1"
SPOTIPY_CLIENT_SECRET = "e1451db628f048a29c4557041ef10d93"
SPOTIPY_REDIRECT_URI = "http://localhost:8888/callback"

sp = spotipy.Spotify(auth_manager=SpotifyOAuth(client_id=SPOTIPY_CLIENT_ID,
                                               client_secret=SPOTIPY_CLIENT_SECRET,
                                               redirect_uri=SPOTIPY_REDIRECT_URI,
                                               scope="user-read-playback-state,user-modify-playback-state"))
websites = {
    "youtube": "https://www.youtube.com",
    "google": "https://www.google.com",
    "spotify": "https://www.spotify.com",
    "wikipedia": "https://www.wikipedia.org"
}

def get_active_window():
    system = platform.system()

    if system == "Windows":
        import pygetwindow as gw
        window = gw.getActiveWindow()
        return window.title if window else "Unknown Window"

    elif system == "Darwin":
        script = 'tell application "System Events" to get name of (processes whose frontmost is true)'
        result = subprocess.run(["osascript", "-e", script], capture_output=True, text=True)
        return result.stdout.strip()

    else:
        return "Unsupported OS"

print("Active Window:", get_active_window())

def say(text):

    tts = gTTS(text=text, lang="en", tld="co.uk")
    tts.save("speech.mp3")
    os.system("afplay speech.mp3")

def take_command():
    r = sr.Recognizer()

    with sr.Microphone() as source:
        print("Listening...")
        r.adjust_for_ambient_noise(source, duration=1)
        audio = r.listen(source)

        try:
            query = r.recognize_google(audio, language="en-in")
            print(f"USER SAID: {query}")
            return query.lower()
        except Exception as e:
            print("Error recognizing speech:", e)
            return ""

def call_phone(number):
    say(f"Calling {number}...")
    os.system(f"osascript -e 'tell application \"FaceTime\" to dial \"{number}\"'")

def call_whatsapp(number):
    say(f"Calling {number} on WhatsApp...")
    kit.sendwhatmsg_instantly(f"+{number}", "Hello!", wait_time=10, tab_close=True)

def open_app(app_name):
    try:
        subprocess.run(["open", "-a", app_name])
        say(f"Opening {app_name}")
    except Exception as e:
        say(f"Sorry, I couldn't open {app_name}.")
        print(e)

def open_website(command):
    for site, url in websites.items():
        if f"open {site}" in command:
            say(f"Opening {site}")
            webbrowser.open(url)
            return True
    return False


def search_google(query):
    url = f"https://www.google.com/search?q={query.replace(' ', '+')}"
    webbrowser.open(url)
    say(f"Searching Google for {query}")

def search_youtube(query):
    url = f"https://www.youtube.com/results?search_query={query.replace(' ', '+')}"
    webbrowser.open(url)
    say(f"Searching YouTube for {query}")

def play_spotify():
    say("Do you want to play a song or a playlist?")
    choice = take_command()

    if "song" in choice:
        say("Which song do you want to play?")
        song_name = take_command()
        if not song_name:
            say("I couldn't understand the song name.")
            return

        results = sp.search(q=song_name, type="track", limit=1)
        if results["tracks"]["items"]:
            track_uri = results["tracks"]["items"][0]["uri"]
            sp.start_playback(uris=[track_uri])
            say(f"Playing {song_name} on Spotify")
        else:
            say("I couldn't find the song on Spotify")

    elif "playlist" in choice:
        say("Which playlist do you want to play?")
        playlist_name = take_command()
        if not playlist_name:
            say("I couldn't understand the playlist name.")
            return

        results = sp.search(q=playlist_name, type="playlist", limit=1)
        if results["playlists"]["items"]:
            playlist_uri = results["playlists"]["items"][0]["uri"]
            sp.start_playback(context_uri=playlist_uri)
            say(f"Playing the playlist {playlist_name} on Spotify")
        else:
            say("I couldn't find the playlist on Spotify")

if __name__ == "__main__":
    say("hello i am you virtual assistant, eve . "
        "how may i be of assistance")
    print("Voice Assistant Running...")

    while True:
        text = take_command()
        if "call" in text:
            say("Which number do you want to call?")
            number = take_command()

            if "whatsapp" in text:
                call_whatsapp(number)
            else:
                call_phone(number)
        if open_website(text):
            continue
        if "search google for" in text:
            query = text.replace("search google for", "").strip()
            search_google(query)

        elif "search youtube for" in text:
            query = text.replace("search youtube for", "").strip()
            search_youtube(query)

        elif "open" in text:
            app_name = text.replace("open", "").strip()
            open_app(app_name)

        if "play spotify" in text:
            play_spotify()

        if "the time" in text:
            current_time = datetime.datetime.now().strftime("%H:%M:%S")
            say(f"Sir, the time is {current_time}")
            print(f"The time is {current_time}")
